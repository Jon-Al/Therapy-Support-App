package com.example.mentalhealth;

import android.app.DatePickerDialog;
import android.os.Bundle;

import android.text.TextUtils;
import android.widget.*;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.RecyclerView;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;

/**
 * Symptom fragment will control and present the logic for the executed tasks to the views.
 * It will act the controller and view presenter.
 * <p>
 * References:
 * 1. https://www.geeksforgeeks.org/how-to-create-and-add-data-to-sqlite-database-in-android/
 */
public class SymptomFragment extends Fragment {

    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private EditText symptomDescriptionEdt, symptomNameEdt, oldsystemNameEdt;
    private Button addSymptomBtn, readSymptomBtn, deleteSymptomBtn, updateSymptomBtn;
    public SymptomDBHelper SymptomdbHelper;

    private final Calendar myCalendar = Calendar.getInstance();
    Adapter adapter;

    /**
     * Creates a constructor for the class.
     */
    public SymptomFragment() {
        // Required empty public constructor
    }

    /**
     * Autogenerated.
     *
     * @param param1
     * @param param2
     * @return
     */
    // TODO: Rename and change types and number of parameters
    public static SymptomFragment newInstance(String param1, String param2) {
        SymptomFragment fragment = new SymptomFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    /**
     * Autogenerated
     *
     * @param savedInstanceState
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    /**
     * The function will create and present the logic for the symptom fragment.
     *
     * @param inflater
     * @param container
     * @param savedInstanceState
     * @return
     */
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        View view = inflater.inflate(R.layout.fragment_symptom, container, false);

        symptomDescriptionEdt = view.findViewById(R.id.idEdtSymptomDescription);
        symptomNameEdt = view.findViewById(R.id.idEdtSymptomName);
        oldsystemNameEdt = view.findViewById(R.id.idEdtOldSymptomDescription);

        addSymptomBtn = view.findViewById(R.id.idBtnAddSymptom);
        readSymptomBtn = view.findViewById(R.id.idBtnReadSymptom);
        deleteSymptomBtn = view.findViewById(R.id.idBtnDeleteSymptom);
        updateSymptomBtn = view.findViewById(R.id.idBtnUpdateSymptom);

        // creating a new dbhandler class
        // and passing our context to it.
        SymptomdbHelper = new SymptomDBHelper(view.getContext());

        final EditText userdate = (EditText) view.findViewById(R.id.date1);

        // Users can set a specific date that they want.
        DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {

            /**
             * Set the specific date that the user wants.
             * @param view
             * @param year
             * @param month
             * @param day
             */
            @Override
            public void onDateSet(DatePicker view, int year, int month, int day) {


                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, month);
                myCalendar.set(Calendar.DAY_OF_MONTH, day);
                String myFormat = "MM/dd/yy";
                SimpleDateFormat dateFormat = new SimpleDateFormat(myFormat, Locale.US);
                userdate.setText(dateFormat.format(myCalendar.getTime()));
            }
        };

        // users can choose the specific date that they want.
        userdate.setOnClickListener(new View.OnClickListener() {
            /**
             * A view is presented to the user.
             * @param view
             */
            @Override
            public void onClick(View view) {
                new DatePickerDialog(view.getContext(), date, myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH), myCalendar.get(Calendar.DAY_OF_MONTH)).show();
            }
        });

        // add symptom button will add the data and then clear the outputs.
        addSymptomBtn.setOnClickListener(new View.OnClickListener() {
            /**
             * Add a new symptom.
             * @param v
             */
            @Override
            public void onClick(View v) {


                String symptomDescription = symptomDescriptionEdt.getText().toString();
                String symptomName = symptomNameEdt.getText().toString();

                // validating if the text fields are empty or not.
                if (TextUtils.isEmpty(userdate.getText().toString()) || symptomName.isEmpty()) {
                    Toast.makeText(view.getContext(), "Please enter all the data..", Toast.LENGTH_SHORT).show();
                    return;
                }

                // on below line we are calling a method to add new
                // course to sqlite data and pass all our values to it.
                SymptomdbHelper.addNewSymptom(symptomName, userdate.getText().toString(), symptomDescription);

                // after adding the data we are displaying a toast message.
                Toast.makeText(view.getContext(), "Symptom has been added.", Toast.LENGTH_SHORT).show();

                // clear the fields
                userdate.setText("");
                symptomDescriptionEdt.setText("");
                symptomNameEdt.setText("");
                oldsystemNameEdt.setText("");
            }
        });

        // Read data when clicked.
        readSymptomBtn.setOnClickListener(new View.OnClickListener() {
            /**
             * Create a view of all the presentable symptom data.
             * @param v
             */
            @Override
            public void onClick(View v) {
                // opening a new activity via a intent.
                ListView l;
                // getting our course array
                // list from db handler class.
                ArrayList<SymptomModal> SymptomModalArrayList;
                SymptomModalArrayList = SymptomdbHelper.readSymptoms();

                // Read the data from the list.
                ArrayList<String> Symptom_list_data = new ArrayList<String>();
                for (SymptomModal i : SymptomModalArrayList) {
                    String temp = " " + i.getName() + ";  " + i.getDate() + "; " + i.getDescription();
                    Symptom_list_data.add(temp);
                }

                // Present the information.
                l = view.findViewById(R.id.symptomlist);
                ArrayAdapter<String> arr;
                arr = new ArrayAdapter<String>(view.getContext(), androidx.appcompat.R.layout.support_simple_spinner_dropdown_item, Symptom_list_data);
                l.setAdapter(arr);


            }
        });

        // Delete the entry when clicked.
        deleteSymptomBtn.setOnClickListener(new View.OnClickListener() {
            /**
             * Delete the entry and then clear the field.
             * @param v
             */
            public void onClick(View v) {
                String symptomName = oldsystemNameEdt.getText().toString();

                // check if the output is valid.
                if (symptomName.isEmpty()) {
                    Toast.makeText(view.getContext(), "Please enter the symptom name you want deleted", Toast.LENGTH_SHORT).show();
                    return;
                }

                // delete the output
                SymptomdbHelper.deleteSymptom(symptomName);

                // clear the outputs.
                userdate.setText("");
                symptomDescriptionEdt.setText("");
                symptomNameEdt.setText("");
                oldsystemNameEdt.setText("");
            }
        });

        // update symptoms.
        updateSymptomBtn.setOnClickListener(new View.OnClickListener() {
            /**
             * Update the specific entry and then clear the fields.
             * @param v
             */
            public void onClick(View v) {

                // initiate the variables.
                String symptomDescription = symptomDescriptionEdt.getText().toString();
                String symptomName = symptomNameEdt.getText().toString();
                String oldSymptomName = oldsystemNameEdt.getText().toString();

                // check if the input is valid.
                if (TextUtils.isEmpty(userdate.getText().toString()) || symptomDescription.isEmpty() || symptomName.isEmpty() || oldSymptomName.isEmpty()) {
                    Toast.makeText(view.getContext(), "Please enter all the data..", Toast.LENGTH_SHORT).show();
                    return;
                }

                // update the db
                SymptomdbHelper.updateSymptom(symptomName, userdate.getText().toString(), symptomDescription, oldSymptomName);

                // clear the fields.
                userdate.setText("");
                symptomDescriptionEdt.setText("");
                symptomNameEdt.setText("");
                oldsystemNameEdt.setText("");
            }
        });

        // update the adaptor.
        adapter = new Adapter(view.getContext());


        return view;


    }
}